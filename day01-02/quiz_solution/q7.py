#❓ Q7. 다음 중 불변(immutable) 객체가 아닌 것은 무엇이며, 왜 아니라고 생각하는지 설명해보세요.
# 1. int  
# 2. str  
# 3. list  
# 4. tuple  
# 5. float



# 정답: list
# 이유: list는 내부 요소를 변경할 수 있으므로 mutable 객체입니다. 나머지는 immutable.

# 출력
# list

# 왜 이렇게 나오는지 이해하기
# list는 내부 요소를 변경할 수 있으므로 mutable 객체입니다. 나머지는 immutable.
# 즉, list는 내부 요소를 변경할 수 있으므로 mutable 객체입니다. 나머지는 immutable.



# 📌 해설: mutable vs immutable 객체
# 항목	 타입	  불변성	변경 가능 여부	                예시
# int	숫자형	 ✅ 불변	   ❌ 값을 직접 변경 불가	  a = 3 → a = a + 1은 새 객체
# str	문자열   ✅ 불변	   ❌ 내용 수정 불가	        s[0] = 'x' → 오류 발생
# list	리스트	 ❌ 가변	   ✅ 내부 요소 수정 가능	 a[0] = 100 가능
# tuple	튜플	✅ 불변	  ❌ 요소 수정 불가	        t[0] = 100 → 오류 발생
# float	실수형	 ✅ 불변	  ❌ 값 자체는 수정 불가	      f += 1.0은 새 객체 생성


# 🔍 리스트(list)가 가변인 이유
# 리스트는 다음과 같이 내용을 직접 변경할 수 있습니다:

a = [1, 2, 3]
a[0] = 100         # ✅ 가능
a.append(4)        # ✅ 가능

#이처럼 리스트는 참조값은 동일하지만 내부 값은 변경 가능하므로 mutable 객체입니다.



# 🔒 불변 객체 예시: int, str, float, tuple
# 변경하려는 시도는 모두 새로운 객체 생성으로 이어짐:

a = 10
b = a
a += 1
print(a)  # 11
print(b)  # 10 → b에는 영향 없음

# 문자열도 마찬가지:
s = "hello"
s[0] = "H"   # ❌ TypeError

# 튜플 역시 내부 구조 변경 불가:
t = (1, 2, 3)
t[0] = 100   # ❌ TypeError


# 🧠 내부 동작 정리
# 타입	    메모리 주소 유지?	    내부 상태 변경 가능?
# list	    ✅ 유지됨	        ✅ 가능 (가변 객체)
# int 등	❌ 변경 시 새 객체	  ❌ 내부 상태 변경 불가


# ✅ 정리
# 불변(immutable): 객체가 한 번 생성되면 내용을 바꿀 수 없음

# 가변(mutable): 객체를 직접 수정할 수 있음

# 리스트(list)는 가변 객체이기 때문에 정답은 3번입니다.

