# Q2. 다음 코드의 출력 결과와 x is y 결과를 적으세요.

import array
x = array.array('i', [1, 2, 3])
y = array.array('i', x)
y.append(4)
print('x:', x)
print('x is y:', x is y)

# 출력
# x: array('i', [1, 2, 3])
# x is y: False

# 왜 이렇게 나오는지 이해하기
# x와 y는 같은 객체를 참조하고 있지 않기 때문에, y.append(4)를 하면 x는 변경되지 않는다.
# 즉, x와 y는 같은 객체를 참조하고 있지 않기 때문에, x is y는 False가 나온다.


# ✅ 핵심 개념 요약
# 변수	         설명
# x	            정수형 배열 [1, 2, 3]
# y	            x를 복사해서 만든 새 배열
# x is y	    ❌ 서로 다른 객체 (False)
# y.append(4)	x에는 영향 없음


# 🧠 내부 동작 설명
#1️⃣ x = array.array('i', [1, 2, 3])
# 정수형 배열 객체 생성
# 'i'는 signed int (C 언어의 int)를 의미
# x는 [1, 2, 3]을 담고 있음


# 2️⃣ y = array.array('i', x)
# x를 이용해 새로운 배열을 복사 생성
# 리스트나 튜플을 복사하는 것과 유사하게, x의 값들만 복사됨
# 즉, x와 y는 서로 다른 객체이며, 서로 독립적인 메모리 공간을 사용


# 3️⃣ y.append(4)
# y에만 4가 추가됨
# x는 전혀 영향을 받지 않음


# 🔍 메모리 구조 그림 (텍스트 시각화)
# x ──► array('i', [1, 2, 3])
#y ──► array('i', [1, 2, 3]) → append(4) → [1, 2, 3, 4]
# → 서로 다른 객체를 참조하므로 x is y → False


# 🧪 id()로 확인
print(id(x))  # 예: 140330123456
print(id(y))  # 예: 140330789012 → 서로 다름


# 📦 == vs is 다시 확인
print(x == y)  # True (내용은 같음)
print(x is y)  # False (객체는 다름)

# → ==: 내용 비교, is: 객체 비교


# ✅ 요약 비교표
# 비교 항목	            x	              y = array.array('i', x)
# 값	            [1, 2, 3]	        [1, 2, 3] (초기 상태)
# 객체 ID	        동일하지 않음	        새로 만들어진 객체
# is 결과	        False	            서로 다른 메모리 주소
# append() 결과	    x는 영향 없음	       y에만 4가 추가됨


# 💡 실무 팁
# array.array는 타입이 고정된 배열로 메모리를 절약하거나 C 인터페이스와 연결할 때 유리
# 값을 복사해 새로 만들면 is는 항상 False
# 객체 참조를 공유하려면 **단순 대입(y = x)**을 사용해야 함

