# Q3. 튜플과 리스트의 차이점을 설명하고 다음 빈칸을 채우세요.

a = (1, 2, 3)
b = [1, 2, 3]
# 튜플은 (sequence) 타입이며, (변경 불가능)
# 리스트는 (sequence) 타입이며, (변경 가능)

# 튜플은 불변 객체이며, 리스트는 가변 객체이다.


# ✅ 핵심 차이 요약
# 항목	                튜플 (tuple)	                 리스트 (list)
# 변경 가능 여부	      ❌ 불변(immutable)	               ✅ 가변(mutable)
# 괄호 표기	             소괄호 ()	                       대괄호 []
# 요소 추가/삭제	      불가능	                        가능 (append, pop, del)
# 해시 가능성	         ✅ (해시 가능, 딕셔너리 키 사용 가능)	 ❌ (해시 불가능)
# 사용 목적	            고정된 데이터 묶음	                  변경 가능한 데이터 리스트


# 🧪 코드 비교
a = (1, 2, 3)
b = [1, 2, 3]


# ✅ 튜플은 불변 객체
# a[0] = 99      # ❌ TypeError: 'tuple' object does not support item assignment
# a.append(4)    # ❌ AttributeError: 'tuple' object has no attribute 'append'
# 요소 변경, 추가, 삭제 모두 불가능
# 내부에 포함된 가변 객체가 아닌 이상, 내용은 절대 바뀌지 않음


# ✅ 리스트는 가변 객체
# b[0] = 99      # ✅ 변경 가능
# b.append(4)    # ✅ 변경 가능
# b.pop()        # ✅ 가능


# 📦 메모리와 객체 정체성
# 튜플은 한 번 만들어지면 절대 바뀌지 않음

# 리스트는 언제든 내부 상태가 변경될 수 있음


x = (1, 2, 3)
print(id(x))  # 항상 같음

y = [1, 2, 3]
print(id(y))
y.append(4)
print(id(y))  # 여전히 같음, 하지만 내용은 바뀜



# 🧠 불변성과 해시 가능성
# 튜플은 불변이기 때문에 딕셔너리의 키로 사용할 수 있음

# 리스트는 가변이기 때문에 해시 불가능 → 키로 사용 불가


t = (1, 2, 3)
d = {t: "value"}     # ✅ OK

l = [1, 2, 3]
d = {l: "value"}     # ❌ TypeError: unhashable type: 'list'


# 🔄 사용 시점 예시
# 사용 상황	                        추천 타입	    이유
# 날짜, 좌표, RGB 등 고정된 데이터	    튜플 (tuple)	변경되지 않아야 하므로
# 사용자 입력 목록, 데이터 큐	        리스트 (list)	동적으로 값이 변하므로



# 🧾 결론
# 튜플(tuple): 읽기 전용, 변경 불가, 신뢰성/안정성이 필요할 때 사용

# 리스트(list): 수정/확장 가능한 유연한 데이터 컨테이너