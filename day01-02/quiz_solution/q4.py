# # Q4. '=='와 'is'의 차이점을 설명하고, 아래 예제의 결과를 쓰세요.

a = [1, 2]
b = [1, 2]
print(a == b)
print(a is b)

# 출력
# True
# False

# 왜 이렇게 나오는지 이해하기
# a와 b는 같은 객체를 참조하고 있지 않기 때문에, a is b는 False가 나온다.
# 즉, a와 b는 같은 객체를 참조하고 있지 않기 때문에, a is b는 False가 나온다.


# ✅ 왜 이렇게 되는가?
# 비교 대상	    의미	                결과
# a == b	리스트 안의 값이 같은지 비교	✅ True
# a is b	두 변수가 같은 객체인지 비교	❌ False


# 🧠 메모리 구조 시각화
# a ──► [1, 2]
# b ──► [1, 2]   ← 값은 같지만 객체는 다름

# a와 b는 각기 다른 메모리 주소에 있는 리스트 객체
# 따라서 a is b는 False


# 🔍 == vs is 차이 정리
# 연산자	의미	            내부 메서드
# ==	값 비교	                a.__eq__(b)
# is	객체 identity 비교	    id(a) == id(b)


🧪 실제로 확인해보기
print(id(a))  # 예: 140330000100
print(id(b))  # 예: 140330000200 (다름)


#⚠️ 유사한 반례: 문자열은 intern 될 수 있음
x = "abc"
y = "abc"
print(x is y)   # True일 수도 있음 (캐싱됨)

# → 문자열은 경우에 따라 같은 객체로 최적화될 수 있음
# → 리스트는 항상 새로운 객체 생성


# ✅ 결론 요약
# 항목	결과	이유
# a == b	True	리스트 안의 값이 같음
# a is b	False	서로 다른 객체 (다른 id)


# 💬 실무 팁
# 리스트 비교는 ==로 해야 함

# is는 객체의 동일성(identity) 검사 시만 사용해야 함 (예: is None)