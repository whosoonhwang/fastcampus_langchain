# Q17. 아래 코드에서 메모리 상 동일한 객체는 몇 개인가요?

x = [1, 2, 3]
y = x
z = x[:]


# 정답

print(x is y)
print(x is z)

# 출력
# True
# False

# 왜 이렇게 나오는지 이해하기
# x와 y는 같은 객체, z는 별도 객체


# ✅ 해설 요약
# 변수	     참조 관계	                 설명
# x	        원본 리스트	[1, 2, 3]
# y	        x와 같은 객체를 참조	       y = x는 새로운 객체를 만들지 않음
# z	        x를 복사한 새로운 리스트	    z = x[:]는 얕은 복사 (shallow copy)


# 🔍 is vs ==
# 비교 연산자	의미	                  결과
# x is y	x와 y가 같은 객체인지 비교	    True
# x is z	x와 z는 다른 리스트 객체	    False
# x == z	리스트의 값이 같은지 비교	     True


# 🧠 시각적 메모리 구조
# x = [1, 2, 3]

# x ──► [1, 2, 3]

# y = x

# y ──┘  (같은 리스트 공유)

# z = x[:]

# z ──► [1, 2, 3]  (새로운 리스트 생성,  값은 같지만 다른 객체)


# 🧪 추가 실험: id로 확인
print(id(x))
print(id(y))
print(id(z))

# 출력
# 140330...
# 140330...
#140331...  # z는 다른 주소


# ✨ 정리
# x = [...]: 리스트 객체 생성
# y = x: 동일 객체를 참조 (얕은 복사 아님)\
# z = x[:]: 리스트의 값만 복사하여 새로운 객체 생성


# ⚠️ 실무 팁
# x[:]는 얕은 복사이므로 중첩 리스트일 경우 내부 리스트는 여전히 공유됨 → copy.deepcopy() 필요
# is는 객체의 정체성 비교 (메모리 주소 비교)
# ==는 객체의 내용 비교