# Q16. 불변 객체 내부에 가변 객체가 있을 때 생길 수 있는 문제를 예시와 함께 설명하세요.

# 튜플은 불변이지만 내부에 리스트가 있으면 그 리스트는 변경 가능

a = ([1,2],)
a[0].append(3)  # 가능!
print(a)        # ([1, 2, 3],)


# ❓ 왜 가능한가요?
🔍 핵심 포인트:
# 튜플(tuple)은 불변이지만, 튜플 안에 들어 있는 객체까지 불변이라는 뜻은 아니다.

# 튜플은 **“구조 자체가 불변”**입니다. 즉, 튜플 안의 참조(포인터)가 바뀌지 않는다는 의미지, 
# 그 참조 대상(예: 리스트)이 변경 불가능하다는 뜻은 아닙니다.



# 🧠 시각적 구조 설명
a = ([1, 2],)

# 이 구조는 다음과 같습니다:
# a ──► tuple object (1 slot)
#        │
#        ▼
#      list object → [1, 2]


# a[0]은 리스트 [1, 2]를 가리킵니다.

# a[0].append(3)은 이 리스트에 요소를 추가하는 것이지, 튜플의 구조를 바꾸는 것이 아닙니다.

# 🔍 불가능한 예: 튜플 자체 변경 시도
# a[0] = [9, 9, 9]  # ❌ TypeError

#이건 안됩니다!
#→ 이유: 튜플의 원소를 다른 객체로 바꾸는 것은 불변성 위반이기 때문


# 🔁 예제 비교
a = ([1, 2],)
a[0].append(3)     # ✅ 리스트 내부 변경 → 가능
print(a)           # ([1, 2, 3],)

a[0] = [9, 9, 9]   # ❌ 튜플 구조 변경 시도 → TypeError


# 🔎 요약 정리
# 구분	            가능 여부	이유
# a[0].append(3)	✅ 가능	리스트 자체는 mutable
# a[0] = [9, 9, 9]	❌ 불가	튜플은 구조 자체가 immutable



# ⚠️ 실무에서의 주의
# "튜플은 불변"이라고 단정하면 오류 발생 가능

# 특히 튜플이 복잡한 자료구조를 담고 있을 때는 내부 변경 가능성을 고려해야 함

# 깊은 복사(copy.deepcopy)가 필요한 이유 중 하나



# 💬 결론
# 튜플은 "불변"이지만, 그 안에 담긴 객체가 **가변(mutable)**이라면 내부 내용은 변경될 수 있습니다.
# 즉, "껍데기는 고정, 속 내용은 움직일 수 있음"이 튜플 내부 가변 객체의 본질입니다.